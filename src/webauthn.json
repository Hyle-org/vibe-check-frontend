{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":15992366327228886641,"abi":{"parameters":[{"name":"version","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"initial_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"next_state_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"next_state","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"identity_len","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"identity","type":{"kind":"string","length":56},"visibility":"public"},{"name":"tx_hash_len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"tx_hash","type":{"kind":"array","length":43,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"program_outputs","type":{"kind":"struct","path":"ProgramOutputs","fields":[{"name":"authenticator_data","type":{"kind":"array","length":37,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"client_data_json_len","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"client_data_json","type":{"kind":"array","length":255,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]},"visibility":"public"}],"param_witnesses":{"identity":[{"start":12,"end":68}],"identity_len":[{"start":11,"end":12}],"initial_state":[{"start":2,"end":6}],"initial_state_len":[{"start":1,"end":2}],"next_state":[{"start":7,"end":11}],"next_state_len":[{"start":6,"end":7}],"program_outputs":[{"start":112,"end":533}],"tx_hash":[{"start":69,"end":112}],"tx_hash_len":[{"start":68,"end":69}],"version":[{"start":0,"end":1}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"1":{"source":"use crate::cmp::Ord;\n\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u64 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = self.get_sorting_index(ordering);\n        let mut result = self;\n        // Ensure the indexes are correct\n        for i in 0..N {\n            let pos = find_index(sorted_index, i);\n            assert(sorted_index[pos] == i);\n        }\n        // Sort the array using the indexes\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u64; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<N>(a: [u64; N], find: u64) -> u64 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n","path":"std/array.nr"},"46":{"source":"use dep::std;\n\npub fn prefix_sha256_hash<N>(prefix_length: u8, input: [u8; N]) -> [u8; 32] {\n    let mut result = [0; 32];\n    assert([1, 2, 3, 114, 134, 243].any(|x| x == prefix_length), \"Length is not supported\");\n    if prefix_length == 1 {\n        result = std::hash::sha256(prefix(input, [0; 1]));\n    }\n    if prefix_length == 2 {\n        result = std::hash::sha256(prefix(input, [0; 2]));\n    }\n    if prefix_length == 3 {\n        result = std::hash::sha256(prefix(input, [0; 3]));\n    }\n    if prefix_length == 114 {\n        result = std::hash::sha256(prefix(input, [0; 114]));\n    }\n    if prefix_length == 134 {\n        result = std::hash::sha256(prefix(input, [0; 134]));\n    }\n    if prefix_length == 243 {\n        result = std::hash::sha256(prefix(input, [0; 243]));\n    }\n    result\n}\n\n\npub fn concatenate_arrays(a: [u8; 37], b: [u8; 32]) -> [u8; 69] {\n    let mut result = [0; 69];\n    for i in 0..37 {\n        result[i] = a[i];\n    }\n    for i in 0..32 {\n        result[i+37] = b[i];\n    }\n    result\n}\n\npub fn check_pubkey_matches_identity(pub_key_x: [u8; 32], pub_key_y: [u8; 32], identity: str<56>) {\n    // Compute the publickey as concatenation of pub_key_x and pub_key_y\n    let mut pub_key = [0; 64];\n    for i in 0..32 {\n        pub_key[i] = pub_key_x[i];\n    }\n    for j in 0..32 {\n        pub_key[j+32] = pub_key_y[j];\n    }\n    // Compute the address as the hash of the publickey\n    let address: [u8; 32] = std::hash::sha256(pub_key);\n\n    // identity is the last 20bytes of the address.\n    // Assert that there is a match between identity provided and identity computed from pubkeys\n    for k in 0..20 {\n        assert(address[12 + k] == identity.from_hex_to_uint_slice(2*k, 2*k + 2) as u8);\n    }\n}\n\n\nfn prefix<N, M>(input: [u8; N], mut result: [u8; M]) -> [u8; M] {\n    for i in 0..M {\n        result[i] = input[i];\n    }\n    result\n}","path":"/home/maximilien/cairo-erc20-runner/noir-webauthn/src/utils.nr"},"47":{"source":"mod utils;\n\nuse dep::std;\nuse dep::std::println;\nuse crate::utils::{prefix_sha256_hash, concatenate_arrays, check_pubkey_matches_identity};\n\nglobal CLIENT_DATA_JSON_LEN = 255;\n\nstruct ProgramOutputs {\n    authenticator_data: [u8; 37],\n    client_data_json_len: u8,\n    client_data_json: [u8; CLIENT_DATA_JSON_LEN],\n    signature: [u8; 64],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n}\n\n\nfn main(\n    version: pub u32,\n    initial_state_len: pub u32,\n    initial_state: pub [u8; 4],\n    next_state_len: pub u32,\n    next_state: pub [u8; 4],\n    identity_len: pub u8,\n    identity: pub str<56>,\n    tx_hash_len: pub u32,\n    tx_hash: pub [u8; 43],\n    program_outputs: pub ProgramOutputs\n) {\n    let client_data_json_hash = prefix_sha256_hash(program_outputs.client_data_json_len, program_outputs.client_data_json);\n    let concat = concatenate_arrays(program_outputs.authenticator_data, client_data_json_hash);\n    let hashed_data = std::hash::sha256(concat);\n\n    // Verifying pub_key matches the identity\n    check_pubkey_matches_identity(program_outputs.pub_key_x, program_outputs.pub_key_y, identity);\n\n\n    // The txhash IS the challenge\n    for i in 0..(tx_hash.len()) {\n        assert(tx_hash[i] == program_outputs.client_data_json[36 + i]);\n    }\n\n    let valid_signature = std::ecdsa_secp256r1::verify_signature(program_outputs.pub_key_x, program_outputs.pub_key_y, program_outputs.signature, hashed_data);\n    \n    assert(valid_signature);\n    assert(tx_hash_len == 43);\n    assert(identity_len == 56);\n}\n\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_134() {\n    let authenticator_data = [73,150,13,229,136,14,140,104,116,52,23,15,100,118,96,91,143,228,174,185,162,134,50,199,153,92,243,186,131,29,151,99,1,0,0,0,2];\n    let client_data_json = [123,34,116,121,112,101,34,58,34,119,101,98,97,117,116,104,110,46,103,101,116,34,44,34,99,104,97,108,108,101,110,103,101,34,58,34,77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89,34,44,34,111,114,105,103,105,110,34,58,34,104,116,116,112,58,47,47,108,111,99,97,108,104,111,115,116,58,53,49,55,51,34,44,34,99,114,111,115,115,79,114,105,103,105,110,34,58,102,97,108,115,101,125,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // Padding with 121 zeros (134+121 = 255) \n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0\n    ];\n    let signature = [80,114,197,245,128,150,206,160,135,105,51,205,42,143,25,53,119,97,166,196,95,98,53,63,168,171,63,85,41,42,196,134,26,198,126,179,109,99,41,92,86,45,240,238,196,106,77,219,146,196,183,80,225,170,66,218,169,244,230,252,61,213,29,201];\n    let challenge = [77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89];\n    let pub_key_x = [201,91,99,172,65,154,80,154,189,195,194,210,62,219,224,36,43,134,143,236,137,178,121,35,112,146,103,238,37,100,145,26];\n    let pub_key_y = [169,8,63,83,58,93,192,39,114,115,138,176,56,254,162,127,93,19,156,93,51,9,194,161,253,10,203,128,171,254,255,83];\n\n    let program_outputs = ProgramOutputs {\n            authenticator_data,\n            client_data_json_len: 134,\n            client_data_json,\n            signature,\n            pub_key_x,\n            pub_key_y,\n    };\n\n    let version = 1;\n    let initial_state_len = 1;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 1;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"c59b18d3bdaccb4d689048559a9bb6e8265293bf.ecdsa_secp256r1\";\n    let tx_hash_len = 43;\n    let tx_hash = challenge;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        program_outputs,\n    );\n}\n\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243() {\n    let authenticator_data = [73,150,13,229,136,14,140,104,116,52,23,15,100,118,96,91,143,228,174,185,162,134,50,199,153,92,243,186,131,29,151,99,1,0,0,0,2];\n    let client_data_json = [123,34,116,121,112,101,34,58,34,119,101,98,97,117,116,104,110,46,103,101,116,34,44,34,99,104,97,108,108,101,110,103,101,34,58,34,77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89,34,44,34,111,114,105,103,105,110,34,58,34,104,116,116,112,58,47,47,108,111,99,97,108,104,111,115,116,58,53,49,55,51,34,44,34,99,114,111,115,115,79,114,105,103,105,110,34,58,102,97,108,115,101,44,34,111,116,104,101,114,95,107,101,121,115,95,99,97,110,95,98,101,95,97,100,100,101,100,95,104,101,114,101,34,58,34,100,111,32,110,111,116,32,99,111,109,112,97,114,101,32,99,108,105,101,110,116,68,97,116,97,74,83,79,78,32,97,103,97,105,110,115,116,32,97,32,116,101,109,112,108,97,116,101,46,32,83,101,101,32,104,116,116,112,115,58,47,47,103,111,111,46,103,108,47,121,97,98,80,101,120,34,125,\n        0,0,0,0,0,0,0,0,0,0,0,0 // Padding with 12 zeros (243+12 = 255) \n    ];\n    let signature = [35,9,110,138,212,71,172,124,13,7,194,158,153,63,87,67,67,25,22,122,101,253,159,175,106,50,52,157,164,70,148,46,126,152,146,190,137,37,199,95,249,115,198,94,237,198,18,23,200,185,52,157,189,205,144,63,212,29,177,20,24,255,160,127];\n    let challenge = [77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89];\n    let pub_key_x = [15,206,241,12,21,160,54,11,79,72,44,109,43,45,101,54,210,243,13,236,51,33,47,66,187,38,60,249,64,70,37,252];\n    let pub_key_y = [43,221,114,86,240,184,224,51,237,41,173,85,147,130,225,150,159,150,44,23,57,92,82,37,27,40,69,123,252,224,3,197];\n    \n    let program_outputs = ProgramOutputs {\n        authenticator_data,\n        client_data_json_len: 243,\n        client_data_json,\n        signature,\n        pub_key_x,\n        pub_key_y,\n    };\n\n    let version = 1;\n    let initial_state_len = 1;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 1;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"3f368bf90c71946fc7b0cde9161ace42985d235f.ecdsa_secp256r1\";\n    let tx_hash_len = 43;\n    let tx_hash = challenge;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        program_outputs,\n    );\n}\n\n\n#[test]\nfn test_webauthn_verification_from_vibe_checker_243_bis() {\n    let authenticator_data = [73,150,13,229,136,14,140,104,116,52,23,15,100,118,96,91,143,228,174,185,162,134,50,199,153,92,243,186,131,29,151,99,1,0,0,0,2];\n    let client_data_json = [123,34,116,121,112,101,34,58,34,119,101,98,97,117,116,104,110,46,103,101,116,34,44,34,99,104,97,108,108,101,110,103,101,34,58,34,77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89,34,44,34,111,114,105,103,105,110,34,58,34,104,116,116,112,58,47,47,108,111,99,97,108,104,111,115,116,58,53,49,55,51,34,44,34,99,114,111,115,115,79,114,105,103,105,110,34,58,102,97,108,115,101,44,34,111,116,104,101,114,95,107,101,121,115,95,99,97,110,95,98,101,95,97,100,100,101,100,95,104,101,114,101,34,58,34,100,111,32,110,111,116,32,99,111,109,112,97,114,101,32,99,108,105,101,110,116,68,97,116,97,74,83,79,78,32,97,103,97,105,110,115,116,32,97,32,116,101,109,112,108,97,116,101,46,32,83,101,101,32,104,116,116,112,115,58,47,47,103,111,111,46,103,108,47,121,97,98,80,101,120,34,125,\n        0,0,0,0,0,0,0,0,0,0,0,0 // Padding with 12 zeros (243+12 = 255) \n    ];\n    let signature = [216,184,64,61,79,81,150,39,72,191,167,234,52,253,225,66,52,192,76,159,65,164,134,34,212,255,104,99,14,53,71,115,0,190,96,135,49,186,213,189,93,36,212,143,36,92,27,42,44,103,95,153,46,59,158,22,223,196,84,102,51,209,135,233];\n    let challenge = [77,68,69,121,77,122,81,49,78,106,99,52,79,87,70,105,89,50,82,108,90,106,65,120,77,106,77,48,78,84,89,51,79,68,108,104,89,109,78,107,90,87,89];\n    let pub_key_x = [35,250,194,235,47,86,159,70,36,137,145,195,83,245,203,137,12,28,43,171,167,226,44,90,199,107,235,0,229,229,133,67];\n    let pub_key_y = [84,107,152,100,72,140,98,57,186,30,76,187,129,194,209,158,96,37,254,211,60,198,27,227,167,247,204,51,145,53,120,95];\n\n    let program_outputs = ProgramOutputs {\n        authenticator_data,\n        client_data_json_len: 243,\n        client_data_json,\n        signature,\n        pub_key_x,\n        pub_key_y,\n    };\n\n    let version = 1;\n    let initial_state_len = 1;\n    let initial_state = [0, 0, 0, 0];\n    let next_state_len = 1;\n    let next_state = [0, 0, 0, 0];\n    let identity_len = 56;\n    let identity = \"ae0e5100ea7d28905ce690194c0717cd93756a20.ecdsa_secp256r1\";\n    let tx_hash_len = 43;\n    let tx_hash = challenge;\n\n    main(\n        version,\n        initial_state_len,\n        initial_state,\n        next_state_len,\n        next_state,\n        identity_len,\n        identity,\n        tx_hash_len,\n        tx_hash,\n        program_outputs,\n    );\n}\n","path":"/home/maximilien/cairo-erc20-runner/noir-webauthn/src/main.nr"},"48":{"source":"use dep::std::println;\n\nglobal UPPERCASE_A_INDEX: u8 = 65;\nglobal UPPERCASE_Z_INDEX: u8 = 90;\nglobal LOWERCASE_A_INDEX: u8 = 97;\nglobal LOWERCASE_Z_INDEX: u8 = 122;\nglobal ZERO_INDEX: u8 = 48;\nglobal NINE_INDEX: u8 = 57;\nglobal ASCII_TABLE_START_INDEX: u8 = 0;\nglobal SORTED_ASCII_TABLE: [str<1>; 127] = [    \n    \"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\t\",\"\\n\",\"\\0\",\"\\0\",\"\\r\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\"\\0\",\n    \" \",\"!\",\"\\\"\",\"#\",\"$\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\n    \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n    \":\",\";\",\"<\",\"=\",\">\",\"?\",\"@\",\n    \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n    \"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\n    \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n    \"{\",\"|\",\"}\",\"~\"\n];\n\n// Functions \nfn code_at<N>(s: str<N>, index: u64) -> u8 {\n    assert(index < N);\n    s.as_bytes()[index]\n}\n\nfn char_at<N>(s: str<N>, index: u64) -> str<1> {\n    let byte = code_at(s, index);\n    let ascii_index = byte - ASCII_TABLE_START_INDEX;\n    SORTED_ASCII_TABLE[ascii_index]\n}\n\nfn index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            index = i as i64;\n            match_count += 1;\n        } else if (index != -1) & (i - index < M) {\n            if (str_bytes[i] != substr_bytes[i - index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    // If the match count is not equal to the length of the substring,\n    // then the substring is not in the string\n    // Can happen when looking at a substring that is at the end of the string\n    // but the match is only partial\n    if match_count != M {\n        index = -1;\n    }\n\n    index\n}\n\nfn last_index_of<N, M>(s: str<N>, substr: str<M>) -> i64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    let mut final_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            final_index = temp_index;\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        final_index = temp_index;\n    }\n\n    final_index\n}\n\n// We use Field instead of integers for the Vector here as integers \n// don't seem to work well with Vectors at the moment\nfn indexes_of<N, M>(s: str<N>, substr: str<M>) -> Vec<Field> {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut indexes: Vec<Field> = Vec::new();\n    for i in 0..N {\n        if (match_count == M) {\n            indexes.push(temp_index as Field);\n            temp_index = -1;\n            match_count = 0;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        indexes.push(temp_index as Field);\n    }\n\n    indexes\n}\n\nfn contains<N, M>(s: str<N>, substr: str<M>) -> bool {\n    index_of(s, substr) != -1\n}\n\nfn occurrences_of<N, M>(s: str<N>, substr: str<M>) -> u64 {\n    assert(M <= N, \"Substring length must be less than or equal to string length\");\n    let substr_bytes = substr.as_bytes();\n    let str_bytes = s.as_bytes();\n    let mut temp_index = -1 as i64;\n    // To keep track of how many characters of the substring\n    // have been found\n    let mut match_count = 0;\n    let mut occurrences = 0;\n    for i in 0..N {\n        if (match_count == M) {\n            temp_index = -1;\n            match_count = 0;\n            occurrences += 1;\n        }\n\n        // If the current character matches the first character of the substring\n        // and the index is not set, then set the index to the current index\n        if (temp_index == -1) & (str_bytes[i] == substr_bytes[0]) {\n            temp_index = i as i64;\n            match_count += 1;\n        } else if (temp_index != -1) & (i - temp_index < M) {\n            if (str_bytes[i] != substr_bytes[i - temp_index]) {\n                // If any of the subsequent characters don't match, reset the index\n                // as this means it's not the right substring\n                if (str_bytes[i] == substr_bytes[0]) {\n                    // If the current character matches the first character\n                    // of the substring, then set the index to the current\n                    temp_index = i as i64;\n                    match_count = 1;\n                } else {\n                    // Otherwise, reset the index\n                    temp_index = -1;\n                    match_count = 0;\n                }\n            } else {\n                // Here the characters match, so we increment the match count\n                match_count += 1;\n            }\n        }\n    }\n\n    if (match_count == M) & (temp_index != -1) {\n        occurrences += 1;\n    }\n\n    occurrences\n}\n\nfn digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    assert((byte >= ZERO_INDEX) & (byte <= NINE_INDEX), \"Character is not a digit\");\n    byte - ZERO_INDEX\n}\n\nfn hex_digit_at<N>(s: str<N>, index: u64) -> u8 {\n    let byte = s.as_bytes()[index];\n    if (byte >= ZERO_INDEX) & (byte <= NINE_INDEX) {\n        byte - ZERO_INDEX\n    } else if (byte >= UPPERCASE_A_INDEX) & (byte <= UPPERCASE_Z_INDEX) {\n        byte - UPPERCASE_A_INDEX + 10\n    } else if (byte >= LOWERCASE_A_INDEX) & (byte <= LOWERCASE_Z_INDEX) {\n        byte - LOWERCASE_A_INDEX + 10\n    } else {\n        assert(false, \"Character is not a hex digit\");\n        0\n    }\n}\n\nfn to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = digit_at(s, i);\n        result = result * 10 + digit as u64;\n    }\n    result\n}\n\nfn to_uint<N>(s: str<N>) -> u64 {\n    to_uint_slice(s, 0, N)\n}\n\nfn to_int<N>(s: str<N>) -> i64 {\n    if char_at(s, 0) == \"-\" {\n        -1 * to_uint_slice(s, 1, N) as i64\n    } else {\n        to_uint_slice(s, 0, N) as i64\n    }\n}\n\nfn from_hex_to_uint_slice<N>(s: str<N>, start: u64, end: u64) -> u64 {\n    let mut result = 0;\n    for i in start..end {\n        let digit = hex_digit_at(s, i);\n        result = result * 16 + digit as u64;\n    }\n    result\n}\n\nfn from_hex_to_uint<N>(s: str<N>, with_prefix: bool) -> u64 {\n    if with_prefix {\n        from_hex_to_uint_slice(s, 2, N)\n    } else {\n        from_hex_to_uint_slice(s, 0, N)\n    }\n}\n\nfn to_array_of_chars<N>(s: str<N>) -> [str<1>; N] {\n    let mut result: [str<1>; N] = [\" \"; N];\n    for i in 0..N {\n        result[i] = char_at(s, i);\n    }\n    result\n}\n\n// Struct\n\nstruct String<N> {\n    value: str<N>,\n    len: u64,\n}\n\n// Implementation over String struct\n\nimpl<N> String<N> {\n    fn new(value: str<N>) -> Self {\n        Self { value, len: N }\n    }\n\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self.value, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self.value, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self.value, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self.value, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self.value, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self.value, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self.value, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self.value, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self.value, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self.value, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self.value, 0, self.len)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self.value)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self.value, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self.value, with_prefix)\n    }\n\n    fn to_array_of_chars(self: Self) -> [str<1>; N] {\n        to_array_of_chars(self.value)\n    }\n}\n\n// Trait\ntrait StringTrait {\n    fn code_at(self, index: u64) -> u8;\n    fn char_at(self, index: u64) -> str<1>;\n    fn index_of<M>(self, substr: str<M>) -> i64;\n    fn last_index_of<M>(self, c: str<M>) -> i64;\n    fn indexes_of<M>(self, c: str<M>) -> Vec<Field>;\n    fn contains<M>(self, substr: str<M>) -> bool;\n    fn occurrences_of<M>(self, c: str<M>) -> u64;\n    fn digit_at(self, index: u64) -> u8;\n    fn hex_digit_at(self, index: u64) -> u8;\n    fn to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn to_uint(self) -> u64;\n    fn to_int(self) -> i64;\n    fn from_hex_to_uint_slice(self, start: u64, end: u64) -> u64;\n    fn from_hex_to_uint(self, with_prefix: bool) -> u64;\n}\n\n// Implementation for str type\nimpl<N> StringTrait for str<N> {\n    fn code_at(self: Self, index: u64) -> u8 {\n        code_at(self, index)\n    }\n\n    fn char_at(self: Self, index: u64) -> str<1> {\n        char_at(self, index)\n    }\n\n    fn index_of<M>(self: Self, substr: str<M>) -> i64 {\n        index_of(self, substr)\n    }\n\n    fn last_index_of<M>(self: Self, substr: str<M>) -> i64 {\n        last_index_of(self, substr)\n    }\n\n    fn indexes_of<M>(self: Self, substr: str<M>) -> Vec<Field> {\n        indexes_of(self, substr)\n    }\n\n    fn contains<M>(self: Self, substr: str<M>) -> bool {\n        contains(self, substr)\n    }\n\n    fn occurrences_of<M>(self: Self, substr: str<M>) -> u64 {\n        occurrences_of(self, substr)\n    }\n\n    fn digit_at(self: Self, index: u64) -> u8 {\n        digit_at(self, index)\n    }\n\n    fn hex_digit_at(self: Self, index: u64) -> u8 {\n        hex_digit_at(self, index)\n    }\n\n    fn to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        to_uint_slice(self, start, end)\n    }\n\n    fn to_uint(self: Self) -> u64 {\n        to_uint_slice(self, 0, N)\n    }\n\n    fn to_int(self: Self) -> i64 {\n        to_int(self)\n    }\n\n    fn from_hex_to_uint_slice(self: Self, start: u64, end: u64) -> u64 {\n        from_hex_to_uint_slice(self, start, end)\n    }\n\n    fn from_hex_to_uint(self: Self, with_prefix: bool) -> u64 {\n        from_hex_to_uint(self, with_prefix)\n    }\n}\n\n// Tests for String struct\n#[test]\nfn test_init() {\n    let s = String::new(\"hello\");\n    assert(s.len == 5);\n    assert(s.value == \"hello\");\n}\n\n#[test]\nfn test_char_at() {\n    let s = String::new(\"hello\");\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_code_at() {\n    let s = String::new(\"hello\");\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_index_of() {\n    let s = String::new(\"hello\");\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_last_index_of() {\n    let s = String::new(\"hello\");\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_indexes_of() {\n    let s = String::new(\"hello\");\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_contains() {\n    let s = String::new(\"hello\");\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_occurrences_of() {\n    let s = String::new(\"hello\");\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = String::new(\"some sentence with some repetition\");\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_digit_at() {\n    let s = String::new(\"20231219\");\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_hex_digit_at() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_to_uint() {\n    let s = String::new(\"20231219\");\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_to_int() {\n    let s = String::new(\"-25\");\n    assert(s.to_int() == -25);\n\n    let s = String::new(\"25\");\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_to_uint_slice() {\n    let s = String::new(\"2023/12/19\");\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_from_hex_to_uint_slice() {\n    let s = String::new(\"0x1324ABCDEF\");\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_from_hex_to_uint() {\n    let uppercase_hex = String::new(\"0x1324ABCDEF\");\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = String::new(\"0x1234abcdef\");\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = String::new(\"1234abcdef\");\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = String::new(\"0x000001\");\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n\n#[test]\nfn test_to_array_of_chars() {\n    let s = String::new(\"hello\");\n    let arr = s.to_array_of_chars();\n    assert(arr[0] == \"h\");\n    assert(arr[1] == \"e\");\n    assert(arr[2] == \"l\");\n    assert(arr[3] == \"l\");\n    assert(arr[4] == \"o\");\n}\n\n// Tests for String trait\n#[test]\nfn test_trait_char_at() {\n    let s = \"hello\";\n    assert(s.char_at(0) == \"h\");\n    assert(s.char_at(1) == \"e\");\n    assert(s.char_at(2) == \"l\");\n    assert(s.char_at(3) == \"l\");\n    assert(s.char_at(4) == \"o\");\n}\n\n#[test]\nfn test_trait_code_at() {\n    let s = \"hello\";\n    assert(s.code_at(0) == 104);\n    assert(s.code_at(1) == 101);\n    assert(s.code_at(2) == 108);\n    assert(s.code_at(3) == 108);\n    assert(s.code_at(4) == 111);\n}\n\n#[test]\nfn test_trait_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.index_of(\"h\") == 0);\n    assert(s.index_of(\"e\") == 1);\n    assert(s.index_of(\"l\") == 2);\n    assert(s.index_of(\"o\") == 4);\n    assert(s.index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.index_of(\"he\") == 0);\n    assert(s.index_of(\"el\") == 1);\n    assert(s.index_of(\"ll\") == 2);\n    assert(s.index_of(\"lo\") == 3);\n    assert(s.index_of(\"hello\") == 0);\n    assert(s.index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.index_of(\"some\") == 0);\n    assert(sentence.index_of(\"sentence\") == 5);\n    assert(sentence.index_of(\"with\") == 14);\n    assert(sentence.index_of(\"repetition\") == 24);\n    assert(sentence.index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.index_of(\"ti\") == 28);\n}\n\n#[test]\nfn test_trait_last_index_of() {\n    let s = \"hello\";\n    // Characters\n    assert(s.last_index_of(\"h\") == 0);\n    assert(s.last_index_of(\"e\") == 1);\n    assert(s.last_index_of(\"l\") == 3);\n    assert(s.last_index_of(\"o\") == 4);\n    assert(s.last_index_of(\"a\") == -1);\n\n    // Substrings\n    assert(s.last_index_of(\"he\") == 0);\n    assert(s.last_index_of(\"el\") == 1);\n    assert(s.last_index_of(\"ll\") == 2);\n    assert(s.last_index_of(\"lo\") == 3);\n    assert(s.last_index_of(\"hello\") == 0);\n    assert(s.last_index_of(\"ow\") == -1);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.last_index_of(\"some\") == 19);\n    assert(sentence.last_index_of(\"sentence\") == 5);\n    assert(sentence.last_index_of(\"with\") == 14);\n    assert(sentence.last_index_of(\"repetition\") == 24);\n    assert(sentence.last_index_of(\"some sentence with some repetition\") == 0);\n    assert(sentence.last_index_of(\"ti\") == 30);\n}\n\n#[test]\nfn test_trait_indexes_of() {\n    let s = \"hello\";\n    assert(s.indexes_of(\"h\").get(0) == 0);\n    assert(s.indexes_of(\"e\").get(0) == 1);\n    assert(s.indexes_of(\"l\").get(0) == 2);\n    assert(s.indexes_of(\"l\").get(1) == 3);\n    assert(s.indexes_of(\"o\").get(0) == 4);\n    assert(s.indexes_of(\"a\").len() == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.indexes_of(\"some\").get(0) == 0);\n    assert(sentence.indexes_of(\"some\").get(1) == 19);\n    assert(sentence.indexes_of(\"sentence\").get(0) == 5);\n    assert(sentence.indexes_of(\"with\").get(0) == 14);\n    assert(sentence.indexes_of(\"repetition\").get(0) == 24);\n    assert(sentence.indexes_of(\"some sentence with some repetition\").get(0) == 0);\n    assert(sentence.indexes_of(\"ti\").get(0) == 28);\n    assert(sentence.indexes_of(\"ti\").get(1) == 30);\n    assert(sentence.indexes_of(\"a\").len() == 0);\n}\n\n#[test]\nfn test_trait_contains() {\n    let s = \"hello\";\n    assert(s.contains(\"h\"));\n    assert(s.contains(\"e\"));\n    assert(s.contains(\"l\"));\n    assert(s.contains(\"o\"));\n    assert(!s.contains(\"a\"));\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.contains(\"some\"));\n    assert(sentence.contains(\"sentence\"));\n    assert(sentence.contains(\"with\"));\n    assert(sentence.contains(\"repetition\"));\n    assert(sentence.contains(\"ti\"));\n    assert(!sentence.contains(\"hello\"));\n    assert(!sentence.contains(\"a\"));\n}\n\n#[test]\nfn test_trait_occurrences_of() {\n    let s = \"hello\";\n    assert(s.occurrences_of(\"h\") == 1);\n    assert(s.occurrences_of(\"e\") == 1);\n    assert(s.occurrences_of(\"l\") == 2);\n    assert(s.occurrences_of(\"o\") == 1);\n    assert(s.occurrences_of(\"a\") == 0);\n\n    let sentence = \"some sentence with some repetition\";\n    assert(sentence.occurrences_of(\"some\") == 2);\n    assert(sentence.occurrences_of(\"sentence\") == 1);\n    assert(sentence.occurrences_of(\"with\") == 1);\n    assert(sentence.occurrences_of(\"repetition\") == 1);\n    assert(sentence.occurrences_of(\"ti\") == 2);\n    assert(sentence.occurrences_of(\"hello\") == 0);\n    assert(sentence.occurrences_of(\"a\") == 0);\n}\n\n#[test]\nfn test_trait_digit_at() {\n    let s = \"20231219\";\n    assert(s.digit_at(0) == 2);\n    assert(s.digit_at(1) == 0);\n    assert(s.digit_at(2) == 2);\n    assert(s.digit_at(3) == 3);\n    assert(s.digit_at(4) == 1);\n    assert(s.digit_at(5) == 2);\n    assert(s.digit_at(6) == 1);\n    assert(s.digit_at(7) == 9);\n}\n\n#[test]\nfn test_trait_hex_digit_at() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.hex_digit_at(2) == 1);\n    assert(s.hex_digit_at(3) == 3);\n    assert(s.hex_digit_at(4) == 2);\n    assert(s.hex_digit_at(5) == 4);\n    assert(s.hex_digit_at(6) == 10);\n    assert(s.hex_digit_at(7) == 11);\n    assert(s.hex_digit_at(8) == 12);\n    assert(s.hex_digit_at(9) == 13);\n    assert(s.hex_digit_at(10) == 14);\n    assert(s.hex_digit_at(11) == 15);\n}\n\n#[test]\nfn test_trait_to_uint() {\n    let s = \"20231219\";\n    assert(s.to_uint() == 20231219);\n}\n\n#[test]\nfn test_trait_to_int() {\n    let s = \"-25\";\n    assert(s.to_int() == -25);\n\n    let s = \"25\";\n    assert(s.to_int() == 25);\n}\n\n#[test]\nfn test_trait_to_uint_slice() {\n    let s = \"2023/12/19\";\n    assert(s.to_uint_slice(0, 4) == 2023);\n    assert(s.to_uint_slice(5, 7) == 12);\n    assert(s.to_uint_slice(8, 10) == 19);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint_slice() {\n    let s = \"0x1324ABCDEF\";\n    assert(s.from_hex_to_uint_slice(2, 6) == 0x1324);\n    assert(s.from_hex_to_uint_slice(6, 9) == 0xABC);\n    assert(s.from_hex_to_uint_slice(9, 12) == 0xDEF);\n}\n\n#[test]\nfn test_trait_from_hex_to_uint() {\n    let uppercase_hex = \"0x1324ABCDEF\";\n    assert(uppercase_hex.from_hex_to_uint(true) == 0x1324ABCDEF);\n\n    let lowercase_hex = \"0x1234abcdef\";\n    assert(lowercase_hex.from_hex_to_uint(true) == 0x1234ABCDEF);\n\n    let hex_without_prefix = \"1234abcdef\";\n    assert(hex_without_prefix.from_hex_to_uint(false) == 0x1234ABCDEF);\n\n    let hex_with_leading_zeros = \"0x000001\";\n    assert(hex_with_leading_zeros.from_hex_to_uint(true) == 1);\n}\n","path":"/home/maximilien/nargo/github.com/madztheo/noir-string-utils.gitmain/src/lib.nr"}},"names":["main"]}